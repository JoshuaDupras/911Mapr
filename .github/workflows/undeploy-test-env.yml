name: Undeploy-Test-Env

concurrency: test

# Controls when the workflow will run
on:
  # TODO: make run after dev/test tests finish, plus some time passes
#  push:
#    branches:
#      - dev
#    paths-ignore:
#      - 'README.md'
#      - '.github/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Allows this workflow to be run from another workflow
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: True
      AWS_SECRET_ACCESS_KEY:
        required: True
      REDIS_PASSWORD:
        required: True
      DISCORD_WEBHOOK:
        required: True

jobs:
  discord_notification_undeploy_started:
    runs-on: ubuntu-latest
    steps:
      - name: Discord notification - Un-deploy Started
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: 'TEST-ENV un-deploy started on project {{ EVENT_PAYLOAD.repository.full_name }}'
  
  undeploy_test_env:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: 'us-east-2'
      REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
    steps:     
      - name: Checkout Latest Repo
        uses: actions/checkout@master

      - name: Install copilot
        run: |
          mkdir -p $GITHUB_WORKSPACE/bin
          # download copilot
          curl -Lo copilot-linux https://github.com/aws/copilot-cli/releases/download/v1.15.0/copilot-linux && \
          # make copilot bin executable
          chmod +x copilot-linux && \
          # move to path
          mv copilot-linux $GITHUB_WORKSPACE/bin/copilot && \
          # add to PATH
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Configure AWS profile
        run: aws configure set region us-east-2 --profile default

      - name: Set test-env count to 0
        run: |
          sed -i -r 's/count:.[0-9]/count: 0/' ./copilot/redis/manifest.yml
          sed -i -r 's/count:.[0-9]/count: 0/' ./copilot/rss-scraper/manifest.yml
          sed -i -r 's/count:.[0-9]/count: 0/' ./copilot/web-app/manifest.yml
          cat ./copilot/redis/manifest.yml
          cat ./copilot/rss-scraper/manifest.yml
          cat ./copilot/web-app/manifest.yml

      - name: un-deploy redis container
        run: copilot deploy --app incidentmapr --env test --name redis

      - name: un-deploy rss_scraper container
        run: copilot deploy --app incidentmapr --env test --name rss-scraper

      - name: un-deploy web_app container
        run: copilot deploy --app incidentmapr --env test --name web-app

      - name: init nginx container
        run: copilot deploy --app incidentmapr --env test --name nginx

      - name: copilot show services
        run: copilot svc ls

      - name: copilot show nginx service
        run: copilot svc show --name nginx

  discord_notification_undeploy_done:
    needs: undeploy_test_env
    runs-on: ubuntu-latest
    steps:
      - name: Discord notification - Un-deploy Successful
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: 'TEST-ENV un-deploy SUCCESSFUL on project {{ EVENT_PAYLOAD.repository.full_name }}'

  discord_notification_undeploy_failed:
    needs: undeploy_test_env
    runs-on: ubuntu-latest
    if: always() && (needs.undeploy_test_env.result == 'failure')
    steps:
      - name: Discord notification - Un-deploy Failed
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: 'TEST-ENV un-deploy FAILED on project {{ EVENT_PAYLOAD.repository.full_name }}'
